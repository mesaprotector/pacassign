#!//bin/bash
# Check the user being run as. It needs to match the assignment of
# PACASSIGN_USER. Determine the datafile path from user.
if [ "`/usr/bin/id -u`" = "0" ]; then
	if [ "$PACASSIGN_USER" = "root" ]; then
		datafile=/var/lib/pacassign/datafile
	else
		echo "Variable PACASSIGN_USER improperly set."
		exit
	fi
else
	if [ "$PACASSIGN_USER" = "$USER" ]; then
		if [ -n "$XDG_DATA_HOME" ]; then
			datafile="$XDG_DATA_HOME/pacassign/datafile"
		else 
			datafile="$HOME/.local/share/pacassign/datafile"
		fi
	else
		echo "Variable PACASSIGN_USER improperly set."
		exit
	fi
fi
touch "$datafile"

# Make sure there is at least one argument.
if [ $# = 0 ]; then
	echo "Not enough arguments; use 'pacassign -h' for help."
	exit
fi

# Read first argument to determine what function to run later.
if [ $1 = "-l" ] || [ $1 = "-lt" ] || [ $1 = "-ll" ]; then
	oper="list"
elif [ $1 = "-o" ]; then
	oper="owner"
elif [ $1 = "-t" ] || [ $1 = "-at" ] || [ $1 = "-a" ]; then
	oper="add"
elif [ $1 = "-r" ]; then
	oper="remove"
elif [ $1 = "-h" ]; then
	oper="showhelp"
fi

# Save the first variable (flag).
flag=$1

# Use the 'add' function if the first variable is not a flag. If it is, shift.
if [ -z $oper ]; then
	flag="noflag"
	oper="add"
else 
	shift
fi

# Define all functions called later.
showhelp () {
cat /usr/share/pacassign/helpfile
}

list_spec () {
if [ $flag = "-l" ]; then
	filelist="`grep -f <(printf "^%s /\n" "${packages[@]}") "$datafile" \
	| sort`"
elif [ $flag = "-lt" ]; then
	filelist="`grep -f <(printf "^%s \n" "${packages[@]}") "$datafile" \
	| sort`"
elif [ $flag = "-ll" ]; then
	filelist="`grep -f <(printf "^%s \n" "${packages[@]}") "$datafile" \
	| sort`"
	filelist+=" 
`pacman -Ql "${packages[*]}" | sort`"
fi
echo "$filelist" | LC_ALL=C sort
}

list_gen () {
if [ $flag = "-l" ]; then
	filelist="`awk '$2 != "[t]"' "$datafile"`"
elif [ $flag = "-lt" ]; then
	filelist="`cat "$datafile"`"
elif [ $flag = "-ll" ]; then
	filelist="`pacman -Ql`"
fi
echo "$filelist" | LC_ALL=C sort
}

owner () {
pre_packagelist="`grep -f <(printf " %s$\n" "${files[@]}") "$datafile"`"
if [ -z "$pre_packagelist" ]; then
        packagelist="`pacman -Qo "${files[@]}"`"
else
        pack_packagelist="`echo "$pre_packagelist" | cut -d ' ' -f 1-1 \
        | xargs pacman -Q`"
        file_packagelist="`echo "$pre_packagelist" | cut -d ' ' -f 2- \
        | sed -e 's/$/ is owned by/'`"
        packagelist="`paste -d ' ' <(echo "$file_packagelist") \
        <(echo "$pack_packagelist") | sort`"
        pacmanlist="`pacman -Qo "${files[@]}" 2>/dev/null`"
fi
printf "%s\n%s\n" "$packagelist" "$pacmanlist" | sort
}

add () {
for file in $files; do
	get_parents
	new_datafile=""
	_file="${file//\//\\/}"
	add_parent=("${parents[@]/\//$packages \/}")
	if [ $flag = "-t" ] || [ $flag = "-at" ]; then
		pre_datafile="`comm -13 <(printf "%s\n" "${add_parent[@]}" \
		| sort) "$datafile"`"
		add_parent=("${parents[@]/\//$packages [t] \/}")
		new_datafile="`cat <(printf "%s\n" "${add_parent[@]}") \
		<(echo "$pre_datafile") | sort | uniq`"
	else 
		if [ "`comm -12 <(printf "%s\n" "${add_parent[@]}") \
		"$datafile" | wc -l`" = 0 ]; then
			add_parent=("${parents[@]/\//$packages [t] \/}")
		fi
		pre_datafile="`cat "$datafile" \
		<(printf "%s\n" "${add_parent[@]}")`"
		new_datafile="`echo "$pre_datafile" | sed -e \
		"s/^$packages \[t\] $_file/$packages $_file/" | sort | uniq`"
	fi
	echo "$new_datafile" > "$datafile"
done
echo "Assignment to $packages added."
}

remove () {
remove_with_child="`grep "^$packages" "$datafile" \
| grep -f <(printf " %s\n" "${files[@]}")`"
pre_datafile="`cat "$datafile"`"
comm -13 <(echo "$remove_with_child") <(echo "$pre_datafile") > "$datafile"
echo "Assignment to $packages removed."
}

# This function is used in `add ()` to list out parent directories of a path.
get_parents () {
parentlist_with_child=(`echo "$file" | tr '/' '\n'`)
parentlist=(${parentlist_with_child[@]::${#parentlist_with_child[@]}-1})
parents=()
substring=""
for i in "${!parentlist[@]}"; do
	substring+="/${parentlist[i]}"
	parents+=("`printf "%s/\n" "$substring"`")
done
parents+=("$file")
}

# This function is used to add trailing slashes to directory paths, to match
# what pacman itself does.
add_trailing_slashes () {
files=()
for file in ${pre_files[@]}; do
	if [ -d "$file" ]; then 
		files+=("`printf "%s/" "$file"`")
	else 
		files+=("`printf "%s" "$file"`")
	fi
done
}

# Check for validity of all arguments and if valid, define all variables.
# Then run the corresponding function defined above.
if [ $oper = "list" ]; then
	for i in "$@"; do
		pacman -Qq ${i} &>/dev/null || { echo \
		"Package not found; use 'pacassign -h' for help"; exit; }
	done
	packages=( "$@" )
	if [ -z "$packages" ]; then
		list_gen
	else
		list_spec
	fi 
elif [ $oper = "owner" ]; then
	if [ $# = "0" ]; then
		echo "Not enough arguments; use 'pacassign -h' for help"
		exit
	fi
	for i in "$@"; do
		test -e ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	file_args=( "$@" )
	pre_files=("`realpath "${file_args[@]}"`")
	add_trailing_slashes
	owner
elif [ $oper = "add" ]; then
	pacman -Qq "${@: -1}" &>/dev/null || { echo \
	"Package not found; use 'pacassign -h' for help"; exit; }
	for i in "${@:1:$#-1}"; do
		test -e ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	file_args=("${@:1:$#-1}")
	pre_files=("`realpath "${file_args[@]}"`")
	add_trailing_slashes
	packages="${@: -1}"
	add
elif [ $oper = "remove" ]; then
	pacman -Qq "${@: -1}" &>/dev/null || { echo \
	"Package not found; use 'pacassign -h' for help"; exit; }
	for i in "${@:1:$#-1}"; do 
		test -e ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	file_args=("${@:1:$#-1}")
	pre_files=("`realpath "${file_args[@]}"`")
	add_trailing_slashes
	packages="${@: -1}"
	remove
elif [ $oper = "showhelp" ]; then
	showhelp
fi		
