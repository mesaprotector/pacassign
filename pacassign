#!/usr/bin/env bash
# Check the user being run as. It needs to match the assignment of
# PACASSIGN_NEEDS_ROOT. Determine the datafile path from user.
if [ "`/usr/bin/id -u`" = "0" ]; then
	if [ "$PACASSIGN_NEEDS_ROOT" = "yes" ]; then
		datafile=/var/local/lib/pacassign/datafile
	else
		echo "Environment variable PACASSIGN_NEEDS_ROOT \
		improperly set."
		exit
	fi
else
	if [ "$PACASSIGN_NEEDS_ROOT" = "no" ]; then
		if [ -n "$XDG_DATA_HOME" ]; then
			datafile="$XDG_DATA_HOME/pacassign/datafile"
		else 
			datafile="$HOME/.local/share/pacassign/datafile"
		fi
	else
		echo "Environment variable PACASSIGN_NEEDS_ROOT \
		improperly set."
		exit
	fi
fi

# Make sure there is at least one argument.
if [ $# = 0 ]; then
	echo "Not enough arguments; use 'pacassign -h' for help."
	exit
fi

# Read first argument to determine what function to run later.
if [ $1 = "-l" ] || [ $1 = "-lt" ] || [ $1 = "-ll" ]; then
	oper="list"
elif [ $1 = "-o" ]; then
	oper="owner"
elif [ $1 = "-t" ] || [ $1 = "-at" ] || [ $1 = "-a" ]; then
	oper="add"
elif [ $1 = "-r" ]; then
	oper="remove"
elif [ $1 = "-h" ]; then
	oper="showhelp"
fi

# Save the first variable (flag).
flag=$1

# Use the 'add' function if the first variable is not a flag. If it is, shift.
if [ -z $oper ]; then
	flag="noflag"
	oper="add"
else 
	shift
fi

# Define all functions called later.
showhelp () {
cat /usr/local/share/pacassign/helpfile
}

list () {
if [ $flag = "-l" ]; then
	filelist="`grep -f <(printf "^%s /\n" "${packages[@]}") "$datafile" \
	| sort`"
elif [ $flag = "-lt" ]; then
	filelist="`grep -f <(printf "^%s\n" "${packages[@]}") "$datafile" \
	| sort`"
elif [ $flag = "-ll" ]; then
	pre_filelist="`grep -f <(printf "^%s\n" "${packages[@]}") "$datafile" \
	| sort`"
	paclist="`pacman -Ql "${packages[*]}" | sort`"
	filelist="`comm $pre_filelist $paclist`"
fi
echo "$filelist"
}

owner () {
pre_packagelist="`grep -f <(printf " %s$\n" "${files[@]}") "$datafile"`"
pack_packagelist="`echo "$pre_packagelist" | cut -d ' ' -f 1-1 \
| xargs pacman -Q`"
file_packagelist="`echo "$pre_packagelist" | cut -d ' ' -f 2- \
| sed -e 's/$/ is owned by/'`"
packagelist="paste -d ' ' <(echo \"$file_packagelist\") \
<(echo \"$pack_packagelist\") | sort"
echo "$packagelist"
}

add () {
true
}
remove () {
true
}

# Check for validity of all arguments and if valid, define all variables.
# Then run the corresponding function defined above.
if [ $oper = "list" ]; then
	for i in "$@"; do
		pacman -Qq ${i} 2>/dev/null || { echo \
		"Package not found; use 'pacassign -h' for help"; exit; }
	done
	packages=( "$@" )
	list 
elif [ $oper = "owner" ]; then
	if [ $# = "0" ]; then
		echo "Not enough arguments; use 'pacassign -h' for help"
		exit
	fi
	for i in "$@"; do
		test -f ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	files=( "$@" )
	owner
elif [ $oper = "add" ]; then
	pacman -Qq "${@: -1}" 2>/dev/null || { echo \
	"Package not found; use 'pacassign -h' for help"; exit; }
	for i in "${@:1:$#-1}"; do
		test -f ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	files="${@:1:$#-1}"
	packages="${@: -1}"
	add
elif [ $oper = "remove" ]; then
	pacman -Qq "${@: -1}" 2>/dev/null || { echo \
	"Package not found; use 'pacassign -h' for help"; exit; }
	for i in "${@:1:$#-1}"; do 
		test -f ${i} || { echo \
		"File not found; use 'pacassign -h' for help"; exit; }
	done
	files="${@:1:$#-1}"
	packages="${@: -1}"
	remove
elif [ $oper = "showhelp" ]; then
	showhelp
fi		
